{
  "title": "Mount Point Storage Table",
  "uid": "mountpoint-storage-table",
  "schemaVersion": 38,
  "version": 1,
  "refresh": "30s",
  "panels": [
    {
      "id": 1,
      "type": "table",
      "title": "Disk Usage by Mount Point",
      "datasource": { "type": "prometheus", "uid": "prometheus" },
      "targets": [
        {
          "refId": "A",
          "expr": "node_filesystem_size_bytes{fstype!~\"tmpfs|overlay\",mountpoint!=\"\"}",
          "legendFormat": "",
          "format": "time_series"
        },
        {
          "refId": "B",
          "expr": "node_filesystem_free_bytes{fstype!~\"tmpfs|overlay\",mountpoint!=\"\"}",
          "legendFormat": "",
          "format": "time_series"
        },
        {
          "refId": "C",
          "expr": "node_filesystem_size_bytes{fstype!~\"tmpfs|overlay\",mountpoint!=\"\"} - node_filesystem_free_bytes{fstype!~\"tmpfs|overlay\",mountpoint!=\"\"}",
          "legendFormat": "",
          "format": "time_series"
        }
      ],
      "transformations": [
        {
          "id": "seriesToColumns",
          "options": {}
        },
        {
          "id": "merge",
          "options": {
            "mode": "outer",
            "joinFields": ["instance", "mountpoint"]
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {},
            "renameByName": {
              "mountpoint": "Mount Point",
              "Value #A": "Total (GiB)",
              "Value #B": "Free (GiB)",
              "Value #C": "Used (GiB)"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "mode": "binary",
            "reduce": "sum",
            "alias": "Used (MiB)",
            "binary": {
              "left": "Used (GiB)",
              "operator": "*",
              "right": "1024"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "mode": "binary",
            "reduce": "sum",
            "alias": "Free (MiB)",
            "binary": {
              "left": "Free (GiB)",
              "operator": "*",
              "right": "1024"
            }
          }
        },
        {
          "id": "convertFieldType",
          "options": {
            "conversions": [
              { "fieldName": "Total (GiB)", "format": "bytes", "unit": "gibibytes" },
              { "fieldName": "Free (GiB)", "format": "bytes", "unit": "gibibytes" },
              { "fieldName": "Used (GiB)", "format": "bytes", "unit": "gibibytes" },
              { "fieldName": "Used (MiB)", "format": "bytes", "unit": "mebibytes" },
              { "fieldName": "Free (MiB)", "format": "bytes", "unit": "mebibytes" }
            ]
          }
        }
      ],
      "options": {
        "showHeader": true,
        "sortBy": []
      },
      "gridPos": { "h": 12, "w": 24, "x": 0, "y": 0 }
    }
  ]
}



local.file_match "app_logs" {
  path_targets = [{ "__path__" = "/logs/*.log" }]
}

loki.source.file "app_logs" {
  targets    = local.file_match.app_logs.targets
  forward_to = [loki.process.add_app_labels.receiver]
}

loki.process "add_app_labels" {
  stage.static_labels {
    values = {
      service_name = "Starter"
      pod_name     = "linux-host"  # Replace or set via env("HOSTNAME") if needed
    }
  }
  forward_to = [loki.write.default.receiver]
}

loki.write "default" {
  endpoint {
    url = "http://localhost:3100/loki/api/v1/push"
  }
}


server {
    listen 80;
    server_name yourdomain.com;

    location /grafana/ {
        proxy_pass         http://localhost:3000/;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        rewrite ^/grafana/(.*) /$1 break;
    }
}


[server]
root_url = http://192.168.1.100/grafana/
serve_from_sub_path = true


auth_enabled: false

server:
  http_listen_port: 3100
  log_level: info

ingester:
  lifecycler:
    ring:
      kvstore:
        store: inmemory
      replication_factor: 1
  final_sleep: 0s
  chunk_idle_period: 5m
  max_chunk_age: 1h

schema_config:
  configs:
    - from: 2024-01-01
      store: boltdb-shipper
      object_store: filesystem
      schema: v13
      index:
        prefix: index_
        period: 24h

storage_config:
  boltdb_shipper:
    active_index_directory: /tmp/loki/index
    cache_location: /tmp/loki/boltdb-cache
    shared_store: filesystem
  filesystem:
    directory: /tmp/loki/chunks

limits_config:
  enforce_metric_name: false
  reject_old_samples: true
  reject_old_samples_max_age: 168h

chunk_store_config:
  max_look_back_period: 0s

table_manager:
  retention_deletes_enabled: false
  retention_period: 0s


server "http" {
  listen_address = "0.0.0.0:12345" # Alloy UI/metrics port
  log_level      = "info"
}

local.file_match "app_logs" {
  path_targets = {
    "app" = "/uat/xsys/app.log"
  }
  forward_to = [loki.write.default.receiver]
}

loki.write "default" {
  endpoint {
    url = "http://localhost:3100/loki/api/v1/push"
  }
}
