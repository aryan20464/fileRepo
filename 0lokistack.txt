### üì° Network Monitoring PromQL Queries

# Bytes received per second per interface
rate(node_network_receive_bytes_total[1m])

# Bytes transmitted per second per interface
rate(node_network_transmit_bytes_total[1m])

# Packets dropped
rate(node_network_dropped_total[1m])

# Errors in/out
rate(node_network_receive_errs_total[1m])
rate(node_network_transmit_errs_total[1m])

# Interface saturation (bytes in + out per interface)
rate(node_network_receive_bytes_total[1m]) + rate(node_network_transmit_bytes_total[1m])

---

### üñ•Ô∏è System Metrics PromQL Queries

# CPU Usage (total usage per instance)
100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)

# Load average (1m, 5m, 15m)
node_load1
node_load5
node_load15

# Total Memory Used
(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / (1024 * 1024 * 1024)

# Total Swap Used
(node_memory_SwapTotal_bytes - node_memory_SwapFree_bytes) / (1024 * 1024 * 1024)

# Running and Blocked Processes
node_procs_running
node_procs_blocked

# System Uptime (in seconds)
node_time_seconds - node_boot_time_seconds

---

### üíΩ Disk Metrics PromQL Queries

# Disk Total
node_filesystem_size_bytes{fstype!~"tmpfs|aufs|overlay"}

# Disk Free
node_filesystem_free_bytes{fstype!~"tmpfs|aufs|overlay"}

# Disk Used
node_filesystem_size_bytes{fstype!~"tmpfs|aufs|overlay"} - node_filesystem_free_bytes{fstype!~"tmpfs|aufs|overlay"}

---

### üåê NGINX Metrics PromQL Queries

# Total Requests per second
sum(rate(nginx_http_requests_total[1m]))

# Request Percentages by Status Code

# 2xx Success Rate
100 * sum(rate(nginx_http_requests_total{code=~"2.."}[1m])) / sum(rate(nginx_http_requests_total[1m]) or vector(1))

# 3xx Redirection Rate
100 * sum(rate(nginx_http_requests_total{code=~"3.."}[1m])) / sum(rate(nginx_http_requests_total[1m]) or vector(1))

# 4xx Client Error Rate
100 * sum(rate(nginx_http_requests_total{code=~"4.."}[1m])) / sum(rate(nginx_http_requests_total[1m]) or vector(1))

# 5xx Server Error Rate
100 * sum(rate(nginx_http_requests_total{code=~"5.."}[1m])) / sum(rate(nginx_http_requests_total[1m]) or vector(1))

---

### üß™ Example Visualization Ideas in Grafana

- **Line graphs** for network traffic over time (bytes/sec)
- **Single stat panels** for total CPU, memory, swap usage
- **Bar graphs** per interface (network) or per mount point (disk)
- **Table** for process stats, uptime, and disk usage
- **Pie chart or stat** panels for NGINX request codes

Would you like the combined dashboard JSON with all these panels pre-configured?




local.file_match "app_logs" {
  path_targets = [{ "__path__" = "/logs/*.log" }]
}

loki.source.file "app_logs" {
  targets    = local.file_match.app_logs.targets
  forward_to = [loki.process.add_app_labels.receiver]
}

loki.process "add_app_labels" {
  stage.static_labels {
    values = {
      service_name = "Starter"
      pod_name     = "linux-host"  # Replace or set via env("HOSTNAME") if needed
    }
  }
  forward_to = [loki.write.default.receiver]
}

loki.write "default" {
  endpoint {
    url = "http://localhost:3100/loki/api/v1/push"
  }
}


server {
    listen 80;
    server_name yourdomain.com;

    location /grafana/ {
        proxy_pass         http://localhost:3000/;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        rewrite ^/grafana/(.*) /$1 break;
    }
}


[server]
root_url = http://192.168.1.100/grafana/
serve_from_sub_path = true


auth_enabled: false

server:
  http_listen_port: 3100
  log_level: info

ingester:
  lifecycler:
    ring:
      kvstore:
        store: inmemory
      replication_factor: 1
  final_sleep: 0s
  chunk_idle_period: 5m
  max_chunk_age: 1h

schema_config:
  configs:
    - from: 2024-01-01
      store: boltdb-shipper
      object_store: filesystem
      schema: v13
      index:
        prefix: index_
        period: 24h

storage_config:
  boltdb_shipper:
    active_index_directory: /tmp/loki/index
    cache_location: /tmp/loki/boltdb-cache
    shared_store: filesystem
  filesystem:
    directory: /tmp/loki/chunks

limits_config:
  enforce_metric_name: false
  reject_old_samples: true
  reject_old_samples_max_age: 168h

chunk_store_config:
  max_look_back_period: 0s

table_manager:
  retention_deletes_enabled: false
  retention_period: 0s


server "http" {
  listen_address = "0.0.0.0:12345" # Alloy UI/metrics port
  log_level      = "info"
}

local.file_match "app_logs" {
  path_targets = {
    "app" = "/uat/xsys/app.log"
  }
  forward_to = [loki.write.default.receiver]
}

loki.write "default" {
  endpoint {
    url = "http://localhost:3100/loki/api/v1/push"
  }
}
