import jwtDecode from 'jwt-decode';
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  constructor(private router: Router) {}

  getToken(): string | null {
    return localStorage.getItem('token');
  }

  isTokenExpired(): boolean {
    const token = this.getToken();
    if (!token) return true;

    try {
      const decoded: { exp: number } = jwtDecode(token);
      const now = Date.now() / 1000; // current time in seconds
      return decoded.exp < now;
    } catch (err) {
      return true; // treat decoding errors as expired
    }
  }

  isLoggedIn(): boolean {
    return !this.isTokenExpired();
  }

  logout(): void {
    localStorage.removeItem('token');
  }
}




Auth Guard

import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  constructor(private auth: AuthService, private router: Router) {}

  canActivate(): boolean {
    if (this.auth.isLoggedIn()) {
      return true;
    } else {
      this.auth.logout(); // clear token if expired
      this.router.navigate(['/login']);
      return false;
    }
  }
}



token interceptor

import { Injectable } from '@angular/core';
import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AuthService } from './auth.service';
import { Router } from '@angular/router';

@Injectable()
export class TokenInterceptor implements HttpInterceptor {
  constructor(private auth: AuthService, private router: Router) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const token = this.auth.getToken();

    if (token) {
      req = req.clone({
        headers: req.headers.set('Authorization', `Bearer ${token}`)
      });
    }

    return next.handle(req).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 401 || this.auth.isTokenExpired()) {
          this.auth.logout();
          this.router.navigate(['/login']);
        }
        return throwError(() => error);
      })
    );
  }
}




import { Injectable } from '@angular/core';
import { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root'
})
export class LoginGuard implements CanActivate {

  constructor(private auth: AuthService, private router: Router) {}

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): boolean | UrlTree {

    // ðŸš« If user is already logged in
    if (this.auth.isLoggedIn()) {
      // âœ… Redirect to dashboard or home (adjust as needed)
      return this.router.parseUrl('/dashboard');
    }

    // âœ… Allow access to login/register/public routes
    return true;
  }
}


const routes: Routes = [
  { path: 'login', component: LoginComponent, canActivate: [LoginGuard] },
  { path: 'register', component: RegisterComponent, canActivate: [LoginGuard] },

  // Protected routes
  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },
  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },
  { path: 'settings', component: SettingsComponent, canActivate: [AuthGuard] },

  // Default redirect
  { path: '', redirectTo: 'login', pathMatch: 'full' },
  { path: '**', redirectTo: 'login' }
];








background: linear-gradient(
    to bottom right,
    rgba(0, 0, 0, 0.5),
    rgba(40, 40, 40, 0.6)
  );
  color: white;
  border-radius: 12px;
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.4);




<div class="login-container">
  <mat-card class="login-card">
    <mat-card-title>Login</mat-card-title>
    <mat-card-content>
      <form [formGroup]="loginForm" (ngSubmit)="onSubmit()">
        <mat-form-field appearance="outline" class="full-width">
          <mat-label>Email</mat-label>
          <input matInput placeholder="Enter email" formControlName="email" required />
        </mat-form-field>

        <mat-form-field appearance="outline" class="full-width">
          <mat-label>Password</mat-label>
          <input matInput type="password" placeholder="Enter password" formControlName="password" required />
        </mat-form-field>

        <button mat-raised-button color="primary" class="full-width">Login</button>
      </form>
    </mat-card-content>
  </mat-card>
</div>




.login-container {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background: #f5f5f5;
}

.login-card {
  width: 350px;
  padding: 20px;
}

.full-width {
  width: 100%;
  margin-bottom: 16px;
}

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  loginForm: FormGroup;

  constructor(private fb: FormBuilder) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required]
    });
  }

  onSubmit(): void {
    if (this.loginForm.valid) {
      console.log('Login data:', this.loginForm.value);
      // Handle login
    }
  }
}




































import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { AppComponent } from './app.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

// Material Modules
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { MatButtonModule } from '@angular/material/button';

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    FormsModule,
    BrowserAnimationsModule,
    MatFormFieldModule,
    MatInputModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatButtonModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}


<div class="container" style="margin: 2rem;">
  <h2>Date Range Picker</h2>

  <form (ngSubmit)="onSubmit()" #dateForm="ngForm">
    <mat-form-field appearance="fill">
      <mat-label>From Date</mat-label>
      <input matInput [matDatepicker]="picker1" [(ngModel)]="fromDate" name="fromDate" required>
      <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>
      <mat-datepicker #picker1></mat-datepicker>
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>To Date</mat-label>
      <input matInput [matDatepicker]="picker2" [(ngModel)]="toDate" name="toDate" required>
      <mat-datepicker-toggle matSuffix [for]="picker2"></mat-datepicker-toggle>
      <mat-datepicker #picker2></mat-datepicker>
    </mat-form-field>

    <button mat-raised-button color="primary" type="submit">Submit</button>
  </form>

  <div *ngIf="submitted" style="margin-top: 1rem;">
    <p><strong>From:</strong> {{ fromDate | date: 'mediumDate' }}</p>
    <p><strong>To:</strong> {{ toDate | date: 'mediumDate' }}</p>
  </div>
</div>


import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html'
})
export class AppComponent {
  fromDate!: Date;
  toDate!: Date;
  submitted = false;

  onSubmit() {
    this.submitted = true;
    console.log('From:', this.fromDate, 'To:', this.toDate);
  }
}
